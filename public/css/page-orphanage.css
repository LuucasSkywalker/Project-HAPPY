#page-orphanage {
    display: flex;
    /*(display:flex) usando para alinhar e organizar os elementos de uma
    página HTML dentro de seus containers de forma dinâmica, deixando uma caixa
    do lado da outra */
    min-height: 100vh;
    /*(min-height: 100vh; está dizendo para ocupar 100% da tela visivel )*/
}

aside.sidebar {
     /*(aside) uma coluna em um site, ou uma barra lateral, (sidebar) é a 
    coluna lateral a direita do site, ou a esquerda podendo usar os dois 
    para personalização no css, no HTML só existe a tag <aside>*/
    position: fixed;
    /*(position: fixed) deixa a parte lateral fixa, não rola no scroll nem
     movimenta*/
    height: 100%;
     /*colocando para altura preencher 100% do espaço*/
    padding: 3.2rem 2.4rem; 
    /*As propriedades de preenchimento padding CSS são usadas para gerar espaço ao 
    redor do conteúdo de um elemento, dentro de quaisquer bordas definidas. 
    (3.2rem funciona para cima e baixo e 2.4rem é para as laterais) */
    background: #15C3D6;
    /*cor de fundo da barra lateral <aside> ou na classe.sidebar*/
    display: flex;
    /*(display:flex) usando para alinhar e organizar os elementos de uma
    página HTML dentro de seus containers de forma dinâmica, deixando uma caixa
    do lado da outra */
    flex-direction: column;
    /*Esse comando (flex-direction: column) irá tirar por padrão o modo que
    o display flex organiza os itens um do lado do outro e irá colocar como
    "COLUNA", um em baixo do outro*/
    justify-content: space-between;
    /*(Justify-Content: space-between) alinha os objetos, o valor 'spacebetween'
    posiciona um objeto de cada lado, com o flex-direction acima, o valor 
    "COLUMN- coluna" ele irá dar espaço para cima e outro para baixo colocando
    um item a cima e outro em baixo, ao invés de colocar um de lado e jogando 
    o outro para lado oposto*/
    align-items: center;
    /* (Align-Items: center;) alinhando objetos ou items no centro do conteúdo
    nesse caso dentro da barra lateral sidebar*/

}
/*-----------------------------------------------------------------------------------*/

/*PARTE DO BOTÃO VOLTAR <- DENTRO DO SIDEBAR */

aside.sidebar footer button {
    
    width: 48px;
    /*largura do botão*/
    height: 48px;
    /*altura do botão*/
    border: none;
    /*Opção para tirar bordar atuais*/
    background: #12AFCB;
    /*cor de fundo botão*/
    border-radius: 1.6rem;
    /*adicionando bordas redondas na caixa botão */
    cursor: pointer;
    /*uma animação do cursor do mouse, ou a setinha do mouse quando para em cima
    ele se torna uma mãozinha ao invés da setinha padrão*/
    display: flex;
    /*(display:flex) usando para alinhar e organizar os elementos de uma
    página HTML dentro de seus containers de forma dinâmica, deixando uma caixa
    do lado da outra */
    align-items: center;
    /* (Align-Items: center;) alinhando objetos ou items no centro do conteúdo
    nesse caso a setinha dentro do botão*/
    justify-content: center;
    /*(Justify-Content: center) alinha os objetos, o valor 'center'
    posiciona o objeto no centro*/
}

aside.sidebar footer button:hover {
    /*criando um (hover em cima do botão), quando o mouse estiver ou passar
    em cima dele*/
    transition: background-color 200ms;
    /*(transition: background-color 200ms) diz que haverá uma transição de cor
    de fundo em 2 segundos, ou 200ms gerando suavidade na transição*/
    background: #17d6eb;
    /*quando o mouse passar ou para em cima dele o background irá mudar de cor*/
}

.with-sidebar {
    /*criando uma class para dar espaçamento das imagens da barra lateral <aside-sidebar>
    da esquerda, chegando elas para direita. Foi criada a classe dentro do <main>*/
    padding-left: 110px;
    /*colocando um espaço da esquerda de 100px*/
}

/*-----------------------------------------------------------------------------------*/

/*PARTE DO DETALHES, IMAGENS, BOTÃO, MAP, CONTATO, WHATSAPP NO CENTRO DO CORPO DA PAGINA,
 OU <MAIN>*/

.orphanage-details {
    /*CORPO DA PAGINA*/
    width: 70rem;
    /*colocando largura maxima de 70rem no corpo do <main> ou da class orphanage-details */
    margin: 6.4rem auto;
    /*colocando uma margina de altura, ou topo de 6.4rem e nas laterais deixando auto*/
    background: #fdfbfb;
    /*cor de fundo*/
    border: 1px solid #d3e2e5 ;
    /*adicionando uma borda em torno do conteúdo <div class="orphanage-details">
    com 3 vaores border: largura de 1px, solida e cor  */
    border-radius: 2rem;
    /*adicionando bordas redondas na pagina details */
}

/*-----------------------------------------------------------------------------------*/
/*PARTE DAS PROPRIEDADES DAS IMAGENS E PERSONALIZAÇÃO DELAS */
.orphanage-details > img {
    /*PRIMEIRA IMAGEM DENTRO DA PAGINA, se colocar só img irá pegar todas as imagens
    dentro do details, como quero pegar só a primeira imagem que está em primeiro nivél
    usasse ('>') para dizer que quer a primeira imagem do primeiro nivél*/
    width: 100%;
    /*colocando a largura da img de primeiro nivél em 100% do espaço da tela dentro do
    limite declarado em orphanage.details, que é de 70rem, ou 700pixel*/
    height: 30rem;
    /*altura da imagem*/
    object-fit: cover;
    /*(obejct-fit) é usada para ajustar a imagem na tela, ou na sua proporção, existe
    varias propriedades para ajustar, a opção :contain irá conter imagem no seu tamanho original
    sem distorção, a opção :cover irá ajustar a imagem, dano um zoom sem ter distoção para 
    adeguar ao tamanho selecionado na img. */
}

.images {
    /*------------UTILIZANDO O GRID--------------*/
    /*SLIDE DE IMAGES, a class="images" contem 6 imagens e 6 butão dentro dessa DIV */
    display: grid;
    /*(GRID) grid diferente de display: flex, ela posibilita a criação de varios containeres,
    ou permite lidar com colunas e linhas de varias formas, diferente de (flex) que posiciona ou 
    um item de cada lado, ou em cima do outro, grid possibilita criar varias colunas e atribuindo
    aos seus filhos a mesma regra*/
    grid-template-columns: repeat(6, 1fr);
    /*após criar um valor 'GRID' libera a propriedade (grid-template-columns:) que são colunas,
    tipo blocos um de cada lado, ou podendo ser um em baixo de outro. a propriedade usada
    (grid-template-columns:) está criando um coluna do lado da outra. a função ("REPEAT") é
    usada para dizer que irá repetir a mesma coluna. Dentro dos seus parâmetros está colocado
    os valores repeat("6, 1fr") o parâmetro "6" diz quantas colunas irá repetir, como são 6 
    6 imagens irá repetir 6 vezes a measma coluna, o outro parâmetro "1fr" está dizendo que
    irá fração de cada coluna ou bloco e colocando flexivél . Poderia colocar no lugar do
    "1fr" o tamanho da imagem, porem usando a opção "1fr" ele irá deixar flexivel o tamanho
    automatico, ou responsivo .  */
    column-gap: 1.6rem;
    /*column-gap é um espaços entre as colunas, ou os blocos aonde ficaram as imagens*/
    margin: 16px 40px 0;
    /*adicionando uma margem para no topo, e dos lados. A parte de baixo está "0" podendo 
    colocar um espaço de margem em baixo também*/
}

/*-----------------------------------------------------------------------------------*/
/*PARTE DOS BOTÕES ONDE ESTÃO AS IMAGENS*/
.images button img {
   /*BOTÕES COM IMAGEM */
   width: 100%;
   /*largura das imagens, está em 100% então irá ocupar a largura de 100% dos blocos ou
   colunas da GRID que está colocada na class="images"*/
   height: 8.8rem;
   /*altura da imagem no bloco, ou coluna da GRID*/
   object-fit: cover;
   /*(obejct-fit) é usada para ajustar a imagem na tela, ou na sua proporção, existe
   varias propriedades para ajustar, a opção :contain irá conter imagem no seu tamanho original
   sem distorção, a opção :cover irá ajustar a imagem, dano um zoom sem ter distoção para 
   adeguar ao tamanho selecionado na img. */   
}